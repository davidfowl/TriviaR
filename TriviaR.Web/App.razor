@inject NavigationManager NavigationManager

<h1>TriviaR@(gameName is not null ? $" - {gameName}" : "")</h1>

@if (currentQuestion is not null)
{
    <div id="question">
        <span style="padding:5px">@currentQuestion.Question</span>

        <ol>
            @for (int i = 0; i < currentQuestion.Choices.Length; i++)
            {
                var choiceIndex = i;
                var choice = currentQuestion.Choices[i];
                <li style="padding:5px;">
                    <button disabled="@(currentAnswer || !Connected)" @onclick="(() => AnswerQuestion(choiceIndex))">@choice</button>
                </li>
            }
        </ol>
    </div>
}
else
{
    <button disabled="@(!CanJoinNewGame)" @onclick="JoinGame">Join new Game</button>
}

<ul>
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code
{
    List<string> messages = new();

    string? gameName;

    // The current question
    GameQuestion? currentQuestion;

    bool currentAnswer;
    bool inGame;

    // Treat the channel like a reusable TaskCompletionSource
    Channel<GameAnswer> answers = Channel.CreateUnbounded<GameAnswer>();

    TimeSpan timeoutPerQuestion;
    int totalQuestions;

    HubConnection _hubConnection = default!;

    bool CanJoinNewGame => Connected && !inGame;
    bool Connected => _hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        var connection = new HubConnectionBuilder()
                        .WithUrl(NavigationManager.ToAbsoluteUri("/trivia"))
                        .WithAutomaticReconnect(new RetryForeverPolicy())
                        .Build();

        // Wire up the event callbacks
        connection.On<string>(nameof(WriteMessage), WriteMessage);
        connection.On<GameQuestion, GameAnswer>(nameof(AskQuestion), AskQuestion);
        connection.On<GameConfiguration>(nameof(GameStarted), GameStarted);
        connection.On<GameCompletedEvent>(nameof(GameCompleted), GameCompleted);

        connection.Reconnecting += (ex) =>
        {
            inGame = false;

            WriteMessage("Connection dropped. Attempting to reconnect...");

            return Task.CompletedTask;
        };

        connection.Closed += (ex) =>
        {
            inGame = false;

            WriteMessage("Reconnect attempts failed. Please refresh the page to reconnect");

            return Task.CompletedTask;
        };

        connection.Reconnected += (connectionId) =>
        {
            WriteMessage("Successfully reconnected. Join a new game.");

            inGame = false;
            currentAnswer = false;
            currentQuestion = null;

            InvokeAsync(StateHasChanged);

            return Task.CompletedTask;
        };


        await connection.StartAsync();

        _hubConnection = connection;
    }

    async Task JoinGame()
    {
        // Join a new game
        gameName = await _hubConnection.InvokeAsync<string>("JoinGame");

        inGame = true;
    }

    void AnswerQuestion(int choice)
    {
        if (!currentAnswer)
        {
            currentAnswer = true;

            // Respond to the currently pending client result (AskQuestion)
            answers.Writer.TryWrite(new GameAnswer { Choice = choice });
        }
    }

    void WriteMessage(string message)
    {
        messages.Add(message);

        InvokeAsync(StateHasChanged);
    }

    void GameStarted(GameConfiguration gameConfiguration)
    {
        totalQuestions = gameConfiguration.NumberOfQuestions;
        timeoutPerQuestion = TimeSpan.FromSeconds(gameConfiguration.QuestionTimeout);

        messages.Clear();
        WriteMessage($"Game has started. Prepare to answer {gameConfiguration.NumberOfQuestions} trivia questions!");
    }

    void GameCompleted(GameCompletedEvent @event)
    {
        inGame = false;
        currentAnswer = false;
        currentQuestion = null;

        messages.Clear();
        WriteMessage($"Game {@event.Name} is completed. Your score is {@event.Correct}/{totalQuestions}");
    }

    async Task<GameAnswer> AskQuestion(GameQuestion question)
    {
        currentAnswer = false;

        messages.Clear();

        currentQuestion = question;

        await InvokeAsync(StateHasChanged);

        using var cts = new CancellationTokenSource(timeoutPerQuestion);

        try
        {
            // Wait for the answer to be written to the channel
            return await answers.Reader.ReadAsync(cts.Token);
        }
        catch (OperationCanceledException)
        {
            // We timed out waiting for an answer
            currentAnswer = true;

            if (inGame)
            {
                WriteMessage("Times up!");
            }

            throw;
        }
    }
}